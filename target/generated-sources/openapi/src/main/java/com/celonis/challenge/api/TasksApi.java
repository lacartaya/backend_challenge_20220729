/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.celonis.challenge.api;

import com.celonis.challenge.api.model.ApiError;
import com.celonis.challenge.api.model.CreateTaskRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T23:18:20.974247+02:00[Europe/Madrid]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Tasks", description = "the Tasks API")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/tasks : List tasks
     *
     * @return OK (status code 200)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "apiTasksGet",
        summary = "List tasks",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Task.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Task>> _apiTasksGet(
        
    ) {
        return apiTasksGet();
    }

    // Override this method
    default  ResponseEntity<List<Task>> apiTasksGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"current\" : 1, \"canceledAt\" : \"2000-01-23T04:56:07.000+00:00\", \"progressPct\" : 5.962134, \"x\" : 0, \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"storageLocation\" : \"storageLocation\", \"y\" : 6, \"id\" : \"id\", \"type\" : \"PROJECT_GENERATION\", \"status\" : \"PENDING\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"current\" : 1, \"canceledAt\" : \"2000-01-23T04:56:07.000+00:00\", \"progressPct\" : 5.962134, \"x\" : 0, \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"storageLocation\" : \"storageLocation\", \"y\" : 6, \"id\" : \"id\", \"type\" : \"PROJECT_GENERATION\", \"status\" : \"PENDING\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks : Create task
     *
     * @param createTaskRequest  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "apiTasksPost",
        summary = "Create task",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> _apiTasksPost(
        @Parameter(name = "CreateTaskRequest", description = "", required = true) @Valid @RequestBody CreateTaskRequest createTaskRequest
    ) {
        return apiTasksPost(createTaskRequest);
    }

    // Override this method
    default  ResponseEntity<Task> apiTasksPost(CreateTaskRequest createTaskRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"current\" : 1, \"canceledAt\" : \"2000-01-23T04:56:07.000+00:00\", \"progressPct\" : 5.962134, \"x\" : 0, \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"storageLocation\" : \"storageLocation\", \"y\" : 6, \"id\" : \"id\", \"type\" : \"PROJECT_GENERATION\", \"status\" : \"PENDING\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks/{taskId}/cancel : Cancel a running task
     *
     * @param taskId  (required)
     * @return Accepted (status code 202)
     *         or Not Found (status code 404)
     *         or Conflict (not running) (status code 409)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "apiTasksTaskIdCancelPost",
        summary = "Cancel a running task",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Accepted"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict (not running)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks/{taskId}/cancel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> _apiTasksTaskIdCancelPost(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return apiTasksTaskIdCancelPost(taskId);
    }

    // Override this method
    default  ResponseEntity<Void> apiTasksTaskIdCancelPost(String taskId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks/{taskId}/execute : Execute task (background)
     *
     * @param taskId  (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Conflict (already running or finished) (status code 409)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "apiTasksTaskIdExecutePost",
        summary = "Execute task (background)",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict (already running or finished)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks/{taskId}/execute",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> _apiTasksTaskIdExecutePost(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return apiTasksTaskIdExecutePost(taskId);
    }

    // Override this method
    default  ResponseEntity<Void> apiTasksTaskIdExecutePost(String taskId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks/{taskId} : Get task by id (incluye progreso)
     *
     * @param taskId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "apiTasksTaskIdGet",
        summary = "Get task by id (incluye progreso)",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/{taskId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> _apiTasksTaskIdGet(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return apiTasksTaskIdGet(taskId);
    }

    // Override this method
    default  ResponseEntity<Task> apiTasksTaskIdGet(String taskId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"current\" : 1, \"canceledAt\" : \"2000-01-23T04:56:07.000+00:00\", \"progressPct\" : 5.962134, \"x\" : 0, \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"storageLocation\" : \"storageLocation\", \"y\" : 6, \"id\" : \"id\", \"type\" : \"PROJECT_GENERATION\", \"status\" : \"PENDING\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks/{taskId}/result : Download generated ZIP (legacy behavior)
     *
     * @param taskId  (required)
     * @return File (status code 200)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "apiTasksTaskIdResultGet",
        summary = "Download generated ZIP (legacy behavior)",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "File", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/{taskId}/result",
        produces = { "application/octet-stream", "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> _apiTasksTaskIdResultGet(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return apiTasksTaskIdResultGet(taskId);
    }

    // Override this method
    default  ResponseEntity<org.springframework.core.io.Resource> apiTasksTaskIdResultGet(String taskId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/tasks/123/execute\", \"code\" : \"TASK_ALREADY_RUNNING\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"Bad Request\", \"message\" : \"Validation failed for field x\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
