/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.celonis.challenge.api;

import com.celonis.challenge.api.model.ApiError;
import com.celonis.challenge.api.model.CounterConfig;
import com.celonis.challenge.api.model.Task;
import com.celonis.challenge.api.model.TaskCreate;
import com.celonis.challenge.api.model.TaskProgress;
import com.celonis.challenge.api.model.TaskUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-19T22:54:46.396694+02:00[Europe/Madrid]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Tasks", description = "Endpoints to manage and execute project generation tasks.")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/tasks/{taskId}/counter/cancel : Cancel counter execution
     * Cancels the background counter if it&#39;s running.
     *
     * @param taskId Task identifier. (required)
     * @return Cancellation requested. (status code 202)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "cancelCounter",
        summary = "Cancel counter execution",
        description = "Cancels the background counter if it's running.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Cancellation requested.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgress.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks/{taskId}/counter/cancel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskProgress> cancelCounter(
        @Parameter(name = "taskId", description = "Task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"current\" : 6, \"progress\" : 8, \"message\" : \"message\", \"status\" : \"PENDING\", \"target\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks : Create task
     * Creates a new task. The server generates the identifier and the creation date. 
     *
     * @param taskCreate  (required)
     * @return Task created. (status code 201)
     *         or Bad Request (status code 400)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create task",
        description = "Creates a new task. The server generates the identifier and the creation date. ",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> createTask(
        @Parameter(name = "TaskCreate", description = "", required = true) @Valid @RequestBody TaskCreate taskCreate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Generate Demo Project\", \"storageLocation\" : \"/var/tmp/a1b2c3.zip\", \"id\" : \"a1b2c3\", \"creationDate\" : \"2025-10-17T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/tasks/{taskId} : Delete task
     * Deletes an existing task.
     *
     * @param taskId Unique task identifier. (required)
     * @return Task deleted (no content). (status code 204)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "Delete task",
        description = "Deletes an existing task.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task deleted (no content)."),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/tasks/{taskId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteTask(
        @Parameter(name = "taskId", description = "Unique task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks/{taskId}/execute : Execute task
     * Triggers the execution of the task identified by &#x60;taskId&#x60;.
     *
     * @param taskId Unique task identifier. (required)
     * @return Execution started (no content). (status code 204)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "executeTask",
        summary = "Execute task",
        description = "Triggers the execution of the task identified by `taskId`.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Execution started (no content)."),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks/{taskId}/execute",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> executeTask(
        @Parameter(name = "taskId", description = "Unique task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks/{taskId}/counter/progress : Get counter progress
     * Returns live progress information for the counter task.
     *
     * @param taskId Task identifier. (required)
     * @return Current progress. (status code 200)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "getCounterProgress",
        summary = "Get counter progress",
        description = "Returns live progress information for the counter task.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Current progress.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgress.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/{taskId}/counter/progress",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskProgress> getCounterProgress(
        @Parameter(name = "taskId", description = "Task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"current\" : 6, \"progress\" : 8, \"message\" : \"message\", \"status\" : \"PENDING\", \"target\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks/{taskId}/result : Download generated file
     * Downloads the generated artifact (ZIP file) associated with the task, if available.
     *
     * @param taskId Unique task identifier. (required)
     * @return File stream (ZIP). (status code 200)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "getResult",
        summary = "Download generated file",
        description = "Downloads the generated artifact (ZIP file) associated with the task, if available.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "File stream (ZIP).", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ApiError.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/{taskId}/result",
        produces = { "application/octet-stream", "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getResult(
        @Parameter(name = "taskId", description = "Unique task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks/{taskId} : Get task by id
     * Returns a single task by its identifier.
     *
     * @param taskId Unique task identifier. (required)
     * @return Task found. (status code 200)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get task by id",
        description = "Returns a single task by its identifier.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/{taskId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> getTask(
        @Parameter(name = "taskId", description = "Unique task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Generate Demo Project\", \"storageLocation\" : \"/var/tmp/a1b2c3.zip\", \"id\" : \"a1b2c3\", \"creationDate\" : \"2025-10-17T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks : List tasks
     * Returns all tasks stored in the system.
     *
     * @return Tasks retrieved successfully. (status code 200)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "listTasks",
        summary = "List tasks",
        description = "Returns all tasks stored in the system.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tasks retrieved successfully.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Task.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Task>> listTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"Generate Demo Project\", \"storageLocation\" : \"/var/tmp/a1b2c3.zip\", \"id\" : \"a1b2c3\", \"creationDate\" : \"2025-10-17T12:34:56Z\" }, { \"name\" : \"Generate Demo Project\", \"storageLocation\" : \"/var/tmp/a1b2c3.zip\", \"id\" : \"a1b2c3\", \"creationDate\" : \"2025-10-17T12:34:56Z\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks/{taskId}/counter/start : Start counter for task
     * Starts a background counter from x to y (inclusive). Increments by one every second. 
     *
     * @param taskId Task identifier where the counter should run. (required)
     * @param counterConfig  (required)
     * @return Counter started (accepted). (status code 202)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "startCounter",
        summary = "Start counter for task",
        description = "Starts a background counter from x to y (inclusive). Increments by one every second. ",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Counter started (accepted).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgress.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks/{taskId}/counter/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskProgress> startCounter(
        @Parameter(name = "taskId", description = "Task identifier where the counter should run.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId,
        @Parameter(name = "CounterConfig", description = "", required = true) @Valid @RequestBody CounterConfig counterConfig
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"current\" : 6, \"progress\" : 8, \"message\" : \"message\", \"status\" : \"PENDING\", \"target\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/tasks/{taskId} : Update task
     * Updates editable fields of an existing task (currently only the name).
     *
     * @param taskId Unique task identifier. (required)
     * @param taskUpdate  (required)
     * @return Task updated. (status code 200)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Error (status code 200)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update task",
        description = "Updates editable fields of an existing task (currently only the name).",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "default", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/tasks/{taskId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> updateTask(
        @Parameter(name = "taskId", description = "Unique task identifier.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId,
        @Parameter(name = "TaskUpdate", description = "", required = true) @Valid @RequestBody TaskUpdate taskUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Generate Demo Project\", \"storageLocation\" : \"/var/tmp/a1b2c3.zip\", \"id\" : \"a1b2c3\", \"creationDate\" : \"2025-10-17T12:34:56Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"code\" : \"code\", \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\", \"message\" : \"message\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
