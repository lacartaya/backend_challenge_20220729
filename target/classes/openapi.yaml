openapi: 3.0.3
info:
  title: Celonis Challenge API
  version: 1.0.0
  description: >
    Simple task management API used in the coding challenge.
    It lets you create, list, update, delete and execute tasks, and download the generated result.

servers:
  - url: http://localhost:8080

tags:
  - name: Tasks
    description: Endpoints to manage and execute project generation tasks.

paths:
  /api/tasks:
    get:
      tags: [Tasks]
      operationId: listTasks
      summary: List tasks
      description: Returns all tasks stored in the system.
      responses:
        '200':
          description: Tasks retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }
        default: { $ref: '#/components/responses/ApiError' }

    post:
      tags: [Tasks]
      operationId: createTask
      summary: Create task
      description: >
        Creates a new task. The server generates the identifier and the creation date.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskCreate' }
      responses:
        '201':
          description: Task created.
          headers:
            Location:
              description: Absolute URL to the newly created resource.
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '400': { $ref: '#/components/responses/BadRequest' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}:
    get:
      tags: [Tasks]
      operationId: getTask
      summary: Get task by id
      description: Returns a single task by its identifier.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '200':
          description: Task found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

    put:
      tags: [Tasks]
      operationId: updateTask
      summary: Update task
      description: Updates editable fields of an existing task (currently only the name).
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskUpdate' }
      responses:
        '200':
          description: Task updated.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/BadRequest' }
        default: { $ref: '#/components/responses/ApiError' }

    delete:
      tags: [Tasks]
      operationId: deleteTask
      summary: Delete task
      description: Deletes an existing task.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '204':
          description: Task deleted (no content).
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/execute:
    post:
      tags: [Tasks]
      operationId: executeTask
      summary: Execute task
      description: Triggers the execution of the task identified by `taskId`.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '204': { description: Execution started (no content). }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/result:
    get:
      tags: [Tasks]
      operationId: getResult
      summary: Download generated file
      description: Downloads the generated artifact (ZIP file) associated with the task, if available.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '200':
          description: File stream (ZIP).
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }
  /api/tasks/{taskId}/counter/start:
    post:
      tags: [ Tasks ]
      operationId: startCounter
      summary: Start counter for task
      description: >
        Starts a background counter from x to y (inclusive). Increments by one every second.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Task identifier where the counter should run.
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CounterConfig' }
      responses:
        '202':
          description: Counter started (accepted).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TaskProgress' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/counter/progress:
    get:
      tags: [ Tasks ]
      operationId: getCounterProgress
      summary: Get counter progress
      description: Returns live progress information for the counter task.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Task identifier.
          schema: { type: string }
      responses:
        '200':
          description: Current progress.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TaskProgress' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }
  /api/tasks/{taskId}/counter/cancel:
    post:
      tags: [ Tasks ]
      operationId: cancelCounter
      summary: Cancel counter execution
      description: Cancels the background counter if it's running.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Task identifier.
          schema: { type: string }
      responses:
        '202':
          description: Cancellation requested.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TaskProgress' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

components:
  schemas:
    CounterConfig:
      type: object
      required: [ x, y ]
      properties:
        x:
          type: integer
          description: Start value (inclusive).
          example: 3
        y:
          type: integer
          description: End value (inclusive). Must be >= x.
          example: 10

    TaskProgress:
      type: object
      required: [ status, progress, current, target ]
      properties:
        status:
          type: string
          description: Current task state.
          enum: [ PENDING, RUNNING, COMPLETED, CANCELED, FAILED ]
        progress:
          type: integer
          format: int32
          description: Percentage from 0 to 100.
          minimum: 0
          maximum: 100
        current:
          type: integer
          description: Current counter value.
        target:
          type: integer
          description: Target counter value (y).
        message:
          type: string
          description: Optional human-readable message.
    # ==== Response model (server → client)
    Task:
      type: object
      required: [id, creationDate]
      properties:
        id:
          type: string
          description: Task identifier.
          example: "a1b2c3"
        name:
          type: string
          description: Human-friendly task name.
          example: "Generate Demo Project"
        creationDate:
          type: string
          format: date-time
          description: Task creation timestamp (UTC).
          example: "2025-10-17T12:34:56Z"
        storageLocation:
          type: string
          readOnly: true
          description: Absolute file path where the generated ZIP was stored (internal use).
          example: "/var/tmp/a1b2c3.zip"

    # ==== Request model (client → server) for create
    TaskCreate:
      type: object
      description: Fields accepted when creating a new task.
      properties:
        name:
          type: string
          description: Human-friendly task name.
      # required: [name]   # ← si quieres exigir name, descomenta

    # ==== Request model (client → server) for update
    TaskUpdate:
      type: object
      description: Fields accepted when updating a task.
      properties:
        name:
          type: string
          description: Human-friendly task name.

    ApiError:
      type: object
      required: [timestamp, status, error, message]
      properties:
        timestamp:
          type: string
          format: date-time
          description: When the error was produced.
        status:
          type: integer
          description: HTTP status code (e.g. 404, 500).
        error:
          type: string
          description: Short error name.
        message:
          type: string
          description: Human-readable description.
        path:
          type: string
          description: Request path.
        code:
          type: string
          description: Application-specific error code.
        details:
          type: array
          description: Optional list of extra error details.
          items: { type: string }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    ApiError:
      description: Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
