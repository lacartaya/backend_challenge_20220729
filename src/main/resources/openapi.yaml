openapi: 3.0.3
info:
  title: Celonis Challenge API
  version: 1.0.0
  description: >
    Simple task management API used in the coding challenge.
    It lets you create, list, update and delete tasks, execute a task, and download its generated result.

servers:
  - url: http://localhost:8080

tags:
  - name: Tasks
    description: Endpoints to manage and execute project generation tasks.

paths:
  /api/tasks:
    get:
      tags: [Tasks]
      operationId: listTasks
      summary: List tasks
      description: Returns all tasks stored in the system.
      responses:
        '200':
          description: Tasks retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }
        default: { $ref: '#/components/responses/ApiError' }

    post:
      tags: [Tasks]
      operationId: createTask
      summary: Create task
      description: >
        Creates a new task. For the current legacy flow, the body is minimal; fields not provided
        will be generated by the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # We keep it simple: reuse Task schema as input as well
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created.
          headers:
            Location:
              description: Absolute URL to the newly created resource.
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '400': { $ref: '#/components/responses/BadRequest' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}:
    get:
      tags: [Tasks]
      operationId: getTask
      summary: Get task by id
      description: Returns a single task by its identifier.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '200':
          description: Task found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

    put:
      tags: [Tasks]
      operationId: updateTask
      summary: Update task
      description: Updates the fields of an existing task.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Task' }
      responses:
        '200':
          description: Task updated.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/BadRequest' }
        default: { $ref: '#/components/responses/ApiError' }

    delete:
      tags: [Tasks]
      operationId: deleteTask
      summary: Delete task
      description: Deletes an existing task.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '204':
          description: Task deleted (no content).
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/execute:
    post:
      tags: [Tasks]
      operationId: executeTask
      summary: Execute task
      description: Triggers the execution of the task identified by `taskId`.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '204': { description: Execution started (no content). }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/result:
    get:
      tags: [Tasks]
      operationId: getResult
      summary: Download generated file
      description: >
        Downloads the generated artifact (ZIP file) associated with the task, if available.
      parameters:
        - in: path
          name: taskId
          required: true
          description: Unique task identifier.
          schema: { type: string }
      responses:
        '200':
          description: File stream (ZIP).
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

components:
  schemas:
    Task:
      type: object
      required: [id, creationDate]
      properties:
        id:
          type: string
          description: Task identifier.
          example: "a1b2c3"
        creationDate:
          type: string
          format: date-time
          description: Task creation timestamp (UTC).
          example: "2025-10-17T12:34:56Z"
        storageLocation:
          type: string
          nullable: true
          description: Absolute file path where the generated ZIP was stored (internal use).
          example: "/var/tmp/a1b2c3.zip"

    ApiError:
      type: object
      required: [timestamp, status, error, message]
      properties:
        timestamp:
          type: string
          format: date-time
          description: When the error was produced.
        status:
          type: integer
          description: HTTP status code (e.g. 404, 500).
        error:
          type: string
          description: Short error name.
        message:
          type: string
          description: Human-readable description.
        path:
          type: string
          description: Request path.
        code:
          type: string
          description: Application-specific error code.
        details:
          type: array
          description: Optional list of extra error details.
          items: { type: string }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    ApiError:
      description: Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
