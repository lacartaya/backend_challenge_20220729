openapi: 3.0.3
info:
  title: Celonis Challenge API
  version: 1.0.0
  description: API-first spec for tasks (project generation + counter)

servers:
  - url: http://localhost:8080

tags:
  - name: Tasks

paths:
  /api/tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Task' }
        default: { $ref: '#/components/responses/ApiError' }
    post:
      tags: [Tasks]
      summary: Create task
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTaskRequest' }
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '400': { $ref: '#/components/responses/BadRequest' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}:
    get:
      tags: [Tasks]
      summary: Get task by id (incluye progreso)
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/execute:
    post:
      tags: [Tasks]
      summary: Execute task (background)
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }
        '409':
          description: Conflict (already running or finished)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/cancel:
    post:
      tags: [Tasks]
      summary: Cancel a running task
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      responses:
        '202': { description: Accepted }
        '404': { $ref: '#/components/responses/NotFound' }
        '409':
          description: Conflict (not running)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        default: { $ref: '#/components/responses/ApiError' }

  /api/tasks/{taskId}/result:
    get:
      tags: [Tasks]
      summary: Download generated ZIP (legacy behavior)
      parameters:
        - in: path
          name: taskId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: File
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404': { $ref: '#/components/responses/NotFound' }
        default: { $ref: '#/components/responses/ApiError' }

components:
  schemas:
    Task:
      type: object
      required: [id, type, status, createdAt]
      properties:
        id: { type: string }
        type:
          type: string
          enum: [PROJECT_GENERATION, COUNTER]
        status:
          type: string
          enum: [PENDING, RUNNING, COMPLETED, CANCELED, FAILED]
        createdAt: { type: string, format: date-time }
        startedAt: { type: string, format: date-time, nullable: true }
        finishedAt: { type: string, format: date-time, nullable: true }
        canceledAt: { type: string, format: date-time, nullable: true }
        # proyecto legacy:
        storageLocation: { type: string, nullable: true }
        # parámetros COUNTER:
        x: { type: integer, nullable: true }
        y: { type: integer, nullable: true }
        current: { type: integer, nullable: true }
        progressPct:
          type: number
          format: float
          nullable: true
          description: 0..100 (opcional)

    CreateTaskRequest:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [PROJECT_GENERATION, COUNTER]
        # Para PROJECT_GENERATION no requiere más.
        # Para COUNTER:
        x: { type: integer, nullable: true }
        y: { type: integer, nullable: true }

    ApiError:
      type: object
      required: [timestamp, status, error, message]
      properties:
        timestamp: { type: string, format: date-time }
        status: { type: integer, example: 400 }
        error: { type: string, example: "Bad Request" }
        message: { type: string, example: "Validation failed for field x" }
        path: { type: string, example: "/api/tasks/123/execute" }
        code: { type: string, example: "TASK_ALREADY_RUNNING" }
        details:
          type: array
          items: { type: string }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    ApiError:
      description: Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
